name: "Update and deploy GeoIP database"

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - .github/**/*
  schedule:
    - cron: "0 3 * * *"

jobs:
  check-for-update:
    name: Check for update
    runs-on: ubuntu-latest
    outputs:
      update-available: ${{ steps.check-for-update.outputs.update-available }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check for GeoIP update
        id: check-for-update
        uses: ./.github/actions/01-check-for-update
        env:
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}

  download-update:
    name: Download update
    runs-on: ubuntu-latest
    needs: check-for-update
    outputs:
      cache-key: ${{ steps.download-update.outputs.cache-key }}
      file-name: ${{ steps.download-update.outputs.file-name }}
    if: ${{ needs.check-for-update.outputs.update-available == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download update
        id: download-update
        uses: ./.github/actions/02-download-update
        env:
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}

      - name: Cache DB file
        uses: actions/cache@v2
        with:
          key: ${{ steps.download-update.outputs.cache-key }}
          path: ${{ steps.download-update.outputs.file-name }}

  build-and-push-image:
    name: Build and push image to ECR
    runs-on: ubuntu-latest
    needs: download-update
    outputs:
      image-uri: ${{ steps.build-push-image-ecr.outputs.image-uri }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Retrieve DB file from cache
        uses: actions/cache@v2
        with:
          key: ${{ needs.download-update.outputs.cache-key }}
          path: ${{ needs.download-update.outputs.file-name }}

      - name: Build image and push to ECR
        id: build-push-image-ecr
        uses: ./.github/actions/03-build-push-image-ecr

      - name: Echo output from previous job
        run: |
          echo ${{ needs.download-update.outputs.file-name }}
          echo ${{ needs.download-update.outputs.cache-key }}

      - name: Echo output within job
        run: |
          echo ${{ steps.build-push-image-ecr.outputs.image-uri }}

  deploy-lambda:
    name: Deploy Lambda
    runs-on: ubuntu-latest
    needs: [build-and-push-image, download-update]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Echo secret
        run: |
          echo ${{ secrets.AWS_REGION }}

      # - name: Deploy Lambda
      #   uses: ./.github/actions/04-deploy-lambda
      #   with:
      #     image-uri: ${{ needs.build-and-push-image.outputs.image-uri }}
